{"version":3,"sources":["App.js","components/Button.js","Controls.js","serviceWorker.js","index.js"],"names":["App","onClick","button","calculate","clearScreen","setState","result","state","slice","this","eval","error","className","btnClick","Component","Button","type","value","props","btnValue","name","e","click","target","Controls","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.f41cebfc.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Controls from \"./Controls.js\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      result: \"\",\n    };\n  }\n  onClick = (button) => {\n    switch (button) {\n      case \"=\":\n        this.calculate();\n        break;\n      case \"C\":\n        this.clearScreen();\n        break;\n      case \"bs\":\n        this.setState({\n          result: this.state.result.slice(0, -1),\n        });\n        break;\n      default:\n        this.setState({\n          result: this.state.result + button,\n        });\n        break;\n    }\n  };\n\n  clearScreen() {\n    this.setState({\n      result: \"\",\n    });\n  }\n  calculate() {\n    try {\n      this.setState({\n        result: eval(this.state.result) + \"\",\n      });\n    } catch (error) {\n      this.setState({\n        result: \"error\",\n      });\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"calculator\">\n          <div className=\"row-4\">\n            <div className=\"display\">{this.state.result}</div>\n          </div>\n          <div className=\"row-8\">\n            <Controls btnClick={this.onClick} />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React, { Component } from \"react\";\r\n\r\nclass Button extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"btn\">\r\n        <input\r\n          type=\"button\"\r\n          value={this.props.btnValue}\r\n          className=\"value\"\r\n          name={this.props.name}\r\n          onClick={(e) => this.props.click(e.target.name)}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Button;\r\n","import React, { Component } from \"react\";\r\nimport Button from \"./components/Button.js\";\r\n\r\nexport default class Controls extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"col btnBlock\">\r\n        <div className=\"row\">\r\n          <Button btnValue=\"C\" name=\"C\" click={this.props.btnClick} />\r\n          <Button btnValue=\"(\" name=\"(\" click={this.props.btnClick} />\r\n          <Button btnValue=\")\" name=\")\" click={this.props.btnClick} />\r\n          <Button btnValue=\"&#8592;\" name=\"bs\" click={this.props.btnClick} />\r\n        </div>\r\n        <div className=\"row\">\r\n          <Button btnValue=\"7\" name=\"7\" click={this.props.btnClick} />\r\n          <Button btnValue=\"8\" name=\"8\" click={this.props.btnClick} />\r\n          <Button btnValue=\"9\" name=\"9\" click={this.props.btnClick} />\r\n          <Button btnValue=\"&#xF7;\" name=\"/\" click={this.props.btnClick} />\r\n        </div>\r\n        <div className=\"row\">\r\n          <Button btnValue=\"4\" name=\"4\" click={this.props.btnClick} />\r\n          <Button btnValue=\"5\" name=\"5\" click={this.props.btnClick} />\r\n          <Button btnValue=\"6\" name=\"6\" click={this.props.btnClick} />\r\n          <Button btnValue=\"&#215;\" name=\"*\" click={this.props.btnClick} />\r\n        </div>\r\n        <div className=\"row\">\r\n          <Button btnValue=\"1\" name=\"1\" click={this.props.btnClick} />\r\n          <Button btnValue=\"2\" name=\"2\" click={this.props.btnClick} />\r\n          <Button btnValue=\"3\" name=\"3\" click={this.props.btnClick} />\r\n          <Button btnValue=\"&#x2212;\" name=\"-\" click={this.props.btnClick} />\r\n        </div>\r\n        <div className=\"row\">\r\n          <Button btnValue=\".\" name=\".\" click={this.props.btnClick} />\r\n          <Button btnValue=\"0\" name=\"0\" click={this.props.btnClick} />\r\n          <Button btnValue=\"=\" name=\"=\" click={this.props.btnClick} />\r\n          <Button btnValue=\"+\" name=\"+\" click={this.props.btnClick} />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","const isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.0/8 are considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\nserviceWorker.unregister();\n"],"sourceRoot":""}